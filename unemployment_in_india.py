# -*- coding: utf-8 -*-
"""Unemployment in India.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EUQNsTDsr8OZe04U2ErBCfjXd-tU0cEX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("/content/Unemployment in India.csv")
df

df.head()

df.shape

df.info()

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

print(df.columns)

df.columns=df.columns.str.strip()

Frequency_list = df['Frequency'].tolist()

Frequency_dict = {}
Frequency_counter = 1
for Frequency in Frequency_list:
  if pd.notnull(Frequency):
    if Frequency not in Frequency_dict:
        Frequency_dict[Frequency] = Frequency_counter
        Frequency_counter += 1
print(Frequency_dict)
df['Frequency']=df['Frequency'].replace(Frequency_dict)
df['Frequency']

Date_list = df['Date'].tolist()

Date_dict = {}
Date_counter = 1
for Date in Date_list:
  if pd.notnull(Date):
    if Date not in Date_dict:
        Date_dict[Date] = Date_counter
        Date_counter += 1
print(Date_dict)
df['Date']=df['Date'].replace(Date_dict)
df['Date']

Area_list = df['Area'].tolist()

Area_dict = {}
Area_counter = 1
for Area in Area_list:
  if pd.notnull(Area):
    if Area not in Area_dict:
        Area_dict[Area] = Area_counter
        Area_counter += 1
print(Area_dict)
df['Area']=df['Area'].replace(Area_dict)
df['Area']

import plotly.express as px

# Box plot of Unemployment Rate by State

fig = px.box(df, x='Region', y='Estimated Unemployment Rate (%)', color='Region',
             labels={'Region' : 'Region', 'Estimated Unemployment Rate (%)' : 'Unemployment Rate (%)'},
             title='Unemployment Rate Per States', template='plotly')

fig.update_layout(xaxis={'categoryorder': 'total descending'})
fig.show()

Region_list = df['Region'].tolist()

Region_dict = {}
Region_counter = 1
for Region in Region_list:
  if pd.notnull(Region):
    if Region not in Region_dict:
        Region_dict[Region] = Region_counter
        Region_counter += 1
print(Region_dict)
df['Region']=df['Region'].replace(Region_dict)
df['Region']

from sklearn.model_selection import train_test_split

x=df[['Region','Date','Frequency','Estimated Employed','Estimated Labour Participation Rate (%)','Area']]
y=df[['Estimated Unemployment Rate (%)']]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()
rf.fit(x_train,y_train)

y_pred=rf.predict(x_test)
y_pred

from sklearn.metrics import (r2_score, mean_absolute_error, mean_squared_error)

score=r2_score(y_pred,y_test)
score

mae=mean_absolute_error(y_test,y_pred)
mae

mse=mean_squared_error(y_test,y_pred)
mse